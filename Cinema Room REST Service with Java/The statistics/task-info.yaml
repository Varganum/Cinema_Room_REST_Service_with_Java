type: edu
files:
  - name: src/cinema/Main.java
    visible: true
    text: |
      package cinema;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Main {
          public static void main(String[] args) {
              SpringApplication.run(Main.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.PresentationError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.Map;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class CinemaTests extends SpringTest {
      
          private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
          private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
          private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
          private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";
      
          private static final int totalRows = 9;
          private static final int totalCols = 9;
          private static final Gson gson = new Gson();
      
          private static String token = "";
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                          resp.getRequest().getMethod() + " " +
                                  resp.getRequest().getLocalUri() +
                                  " should respond with status code " + status + ", " +
                                  "responded: " + resp.getStatusCode() + "\n\n" +
                                  "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          CheckResult testEndpoint() {
              HttpResponse response = get("/seats").send();
              checkStatusCode(response, 200);
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
      
              JsonArrayBuilder arrayBuilder = isArray(totalRows * totalCols);
              for (int i = 1; i <= totalRows; i++) {
                  for (int j = 1; j <= totalCols; j++) {
                      int price = i < 5 ? 10 : 8;
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("row", i)
                              .value("column", j)
                              .value("price", price);
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
              }
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("seats", arrayBuilder)
                              .value("columns", 9)
                              .value("rows", 9)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 1)
                                                      .value("column", 1)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatTicketHasBeenPurchased() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatNumbersOutOfBounds() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "10",
                              "column", "1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "1",
                              "column", "10"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "-1",
                              "column", "-1"
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                                      .anyOtherValues()
                      );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnTicket() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 2,
                              "column", 5
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 2)
                                                      .value("column", 5)
                                                      .value("price", 10)
                                      )
                      );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
      
              String tokenFromResponse = jsonResponse.get("token").getAsString();
              String wrongToken = UUID.randomUUID().toString();
      
              try {
                  response = post(
                          "/return",
                          gson.toJson(Map.of(
                                  "token", wrongToken
                          ))
                  ).send();
              } catch (PresentationError e) {
                  return CheckResult.wrong("An error occurred while trying to send POST /return with wrong token. " +
                          "In such scenario your program should respond with a 400 status code.");
              }
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 2)
                                              .value("column", 5)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testStatsEndpoint() {
      
              HttpResponse response = get("/stats").addParams(Map.of()).send();
              checkStatusCode(response, 401);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_PASSWORD_MESSAGE)
                              .anyOtherValues()
              );
      
      
              return CheckResult.correct();
          }
      
          CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
              Map<String, String> requestParams = Map.of("password", "super_secret");
              HttpResponse response = get("/stats").addParams(requestParams).send();
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("purchased", numberOfPurchasedTickets)
                              .value("income", currentIncome)
                              .value("available", availableSeats)
              );
      
              return CheckResult.correct();
          }
      
          CheckResult returnTicket() {
              HttpResponse response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", token
                      ))
              ).send();
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 7)
                                              .value("column", 4)
                                              .value("price", 8)
                              )
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseAnotherTicket() {
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", "7",
                              "column", "4"
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                      .check(
                              isObject()
                                      .value("token", isString())
                                      .value("ticket",
                                              isObject()
                                                      .value("row", 7)
                                                      .value("column", 4)
                                                      .value("price", 8)
                                      )
                      );
      
              JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
              token = object.get("token").getAsString();
      
              return CheckResult.correct();
          }
      
          CheckResult testTokenInvalidation() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                              .anyOtherValues()
              );
      
              return CheckResult.correct();
          }
      
          CheckResult testReturnedTicketAvailability() {
      
              HttpResponse response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
              String tokenFromResponse = jsonResponse.get("token").getAsString();
      
              response = post(
                      "/return",
                      gson.toJson(Map.of(
                              "token", tokenFromResponse
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              response = post(
                      "/purchase",
                      gson.toJson(Map.of(
                              "row", 3,
                              "column", 6
                      ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson().check(
                      isObject()
                              .value("token", isString())
                              .value("ticket",
                                      isObject()
                                              .value("row", 3)
                                              .value("column", 6)
                                              .value("price", 10)
                              )
              );
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
                  this::testEndpoint,
                  this::testEndpointAvailableSeats,
                  this::testPurchaseTicket,
                  this::testErrorMessageThatTicketHasBeenPurchased,
                  this::testErrorMessageThatNumbersOutOfBounds,
                  this::testReturnTicket,
                  this::testStatsEndpoint,
                  () -> testStats(1, 10, 80),
                  this::testPurchaseAnotherTicket,
                  () -> testStats(2, 18, 79),
                  this::returnTicket,
                  () -> testStats(1, 10, 80),
                  this::testTokenInvalidation,
                  this::testReturnedTicketAvailability
          };
      }
    learner_created: false
  - name: src/cinema/Seat.java
    visible: true
    text: |-
      package cinema;
      
      public class Seat {
      
          private int row;
          private int column;
      
          private int price;
      
          private boolean isBooked;
      
          private String token;
      
      
          public Seat (int row, int column) {
              this.row = row;
              this.column = column;
              if (row < 5) {
                  this.price = 10;
              } else {
                  this.price = 8;
              }
              this.isBooked = false;
          }
      
          public int getRow() {
              return row;
          }
      
          public void setRow(int row) {
              this.row = row;
          }
      
          public int getColumn() {
              return column;
          }
      
          public void setColumn(int column) {
              this.column = column;
          }
      
          public boolean isBooked() {
              return isBooked;
          }
      
          public void setBooked(boolean booked) {
              isBooked = booked;
          }
      
          public int getPrice() {
              return price;
          }
      
          public void setPrice(int price) {
              this.price = price;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      
          public String getToken() {
              return token;
          }
      
          public void tokenReset() {
              this.token = null;
          }
      }
    learner_created: true
  - name: src/cinema/TaskController.java
    visible: true
    text: |-
      package cinema;
      
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.*;
      
      @RestController
      public class TaskController {
      
          private final static Cinema CINEMA = new Cinema();
      
      
          @GetMapping("/seats")
          public Map<String, Object> getCinema() {
              Map<String, Object> result = new LinkedHashMap<>();
              result.put("rows", CINEMA.getRowsNumber());
              result.put("columns", CINEMA.getColumnsNumber());
              result.put("seats", CINEMA.getSeatsToDisplay());
              //System.out.println(result);
              return result;
          }
      
          @PostMapping("/purchase")
          public ResponseEntity<Object> purchaseSeat(@RequestBody UserPurchaseRequest purchaseRequest) {
      
              ResponseEntity<Object> resultResponse;
              int row = purchaseRequest.getRow();
              int column = purchaseRequest.getColumn();
      
              //check seat's row or column validness
              if (CINEMA.isSeatValid(row, column)) {
                  //case of valid seat's row or column
                  Seat requestedSeat = CINEMA.findSeat(row, column);
      
                  if (!requestedSeat.isBooked()) {
                      requestedSeat.setBooked(true);
                      SeatToDisplay seatToDisplay = CINEMA.hideSeatFromDisplay(row, column);
                      resultResponse = ResponseEntity.ok().body(getPurchasedTicketResponseBody(seatToDisplay, requestedSeat));
                  } else {
                      Map<String, String> errorResponse = new HashMap<>();
                      errorResponse.put("error", "The ticket has been already purchased!");
                      resultResponse = ResponseEntity.badRequest().body(errorResponse);
                  }
      
              } else {
                  //case of invalid seat's row or column
                  Map<String, String> errorResponse = new HashMap<>();
                  errorResponse.put("error", "The number of a row or a column is out of bounds!");
                  resultResponse = ResponseEntity.badRequest().body(errorResponse);
              }
      
              return resultResponse;
          }
      
          @PostMapping("/return")
          public ResponseEntity<Object> returnTicket(@RequestBody UserReturnRequest returnRequest) {
      
              ResponseEntity<Object> resultResponse;
              String token = returnRequest.getToken();
      
              //try to find Seat by token
              Seat seatToReturn = CINEMA.findSeat(token);
      
              if (Objects.nonNull(seatToReturn)) {
                  //token found case
                  CINEMA.returnTicket(seatToReturn);
                  resultResponse = ResponseEntity.ok().body(getReturnedTicketResponseBody(seatToReturn));
              } else {
                  //token not found case
                  Map<String, String> errorResponse = new HashMap<>();
                  errorResponse.put("error", "Wrong token!");
                  resultResponse = ResponseEntity.badRequest().body(errorResponse);
              }
      
              return resultResponse;
          }
      
          private Object getReturnedTicketResponseBody(Seat seatToReturn) {
      
              Map<String, Object> result = new LinkedHashMap<>();
      
              result.put("ticket", CINEMA.getSeatToDisplay(seatToReturn));
      
              return result;
      
          }
      
          private Object getPurchasedTicketResponseBody(SeatToDisplay seatToDisplay, Seat requestedSeat) {
      
              Map<String, Object> result = new LinkedHashMap<>();
      
              //generate new token
              String token = String.valueOf(UUID.randomUUID());
              requestedSeat.setToken(token);
      
              result.put("token", token);
              result.put("ticket", seatToDisplay);
      
              return result;
          }
      
          /* just examples
      
          @GetMapping("/tasks/{id}")
          public Task getTask(@PathVariable int id) {
              return taskList.get(id - 1); // list indices start from 0
          }
      
      
          @GetMapping("/tasks/{id}")
          public ResponseEntity<Task> getTasks(@PathVariable int id) {
              return new ResponseEntity<>(taskList.get(id - 1), HttpStatus.ACCEPTED);
          }
      
          */
      
      }
    learner_created: true
  - name: src/cinema/UserReturnRequest.java
    visible: true
    text: |-
      package cinema;
      
      public class UserReturnRequest {
      
          private String token;
      
          public UserReturnRequest() {}
      
          public UserReturnRequest(String token) {
              this.token = token;
          }
      
          public String getToken() {
              return token;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      
      }
    learner_created: true
  - name: src/cinema/Cinema.java
    visible: true
    text: |-
      package cinema;
      
      import java.util.ArrayList;
      
      public class Cinema {
      
          private static final int ROWS_NUMBER = 9;
          private static final int COLUMNS_NUMBER = 9;
      
          private int rowsNumber;
          private int columnsNumber;
      
          private ArrayList<Seat> seats;
          private ArrayList<SeatToDisplay> seatsToDisplay;
          private ArrayList<SeatToDisplay> seatsBooked;
      
          public Cinema() {
              rowsNumber = ROWS_NUMBER;
              columnsNumber = COLUMNS_NUMBER;
      
              this.seats = new ArrayList<>();
              this.seatsToDisplay = new ArrayList<>();
              this.seatsBooked = new ArrayList<>();
      
              for (int i = 0; i < rowsNumber; i++) {
                  for (int j = 0; j < columnsNumber; j++) {
                      Seat newSeat = new Seat(i + 1, j + 1);
                      seats.add(newSeat);
                      seatsToDisplay.add(new SeatToDisplay(i + 1, j + 1, newSeat.getPrice()));
                  }
              }
          }
      
      
          public ArrayList<Seat> getSeats() {
              return seats;
          }
      
          public void setSeats(ArrayList<Seat> seats) {
              this.seats = seats;
          }
      
          public ArrayList<SeatToDisplay> getSeatsToDisplay() {
              ArrayList<SeatToDisplay> result = (ArrayList<SeatToDisplay>) seatsToDisplay.clone();
                      result.removeAll(seatsBooked);
              return result;
          }
      
          public void setSeatsToDisplay(ArrayList<SeatToDisplay> seatsToDisplay) {
              this.seatsToDisplay = seatsToDisplay;
          }
      
          public int getRowsNumber() {
              return rowsNumber;
          }
      
          public void setRowsNumber(int rowsNumber) {
              this.rowsNumber = rowsNumber;
          }
      
          public int getColumnsNumber() {
              return columnsNumber;
          }
      
          public void setColumnsNumber(int columnsNumber) {
              this.columnsNumber = columnsNumber;
          }
      
      
          public Seat findSeat(int row, int column) {
              return seats.get((row - 1) * ROWS_NUMBER + column - 1);
          }
      
          public Seat findSeat(String token) {
      
              Seat result = null;
              Seat checkedSeat;
      
              for (SeatToDisplay checkedBookedSeat : seatsBooked) {
                  checkedSeat = getSeat(checkedBookedSeat);
                  if (token.equals(checkedSeat.getToken())) {
                      result = checkedSeat;
                      break;
                  }
              }
      
              return result;
          }
      
          public SeatToDisplay hideSeatFromDisplay(int row, int column) {
              SeatToDisplay result = seatsToDisplay.get((row - 1) * ROWS_NUMBER + column - 1);
              seatsBooked.add(result);
              return result;
          }
      
          private void returnSeatToDisplay(int row, int column) {
              seatsBooked.remove(seatsToDisplay.get((row - 1) * ROWS_NUMBER + column - 1));
          }
      
          public boolean isSeatValid(int row, int column) {
              return row > 0 && column > 0 && row <= ROWS_NUMBER && column <= COLUMNS_NUMBER;
          }
      
          private Seat getSeat(SeatToDisplay seatToDisplay) {
              return findSeat(seatToDisplay.getRow(), seatToDisplay.getColumn());
          }
      
          public void returnTicket(Seat seatToReturn) {
              seatToReturn.setBooked(false);
              seatToReturn.tokenReset();
              returnSeatToDisplay(seatToReturn.getRow(), seatToReturn.getColumn());
          }
      
      
          public Object getSeatToDisplay(Seat seatToReturn) {
              return seatsToDisplay.get((seatToReturn.getRow() - 1) * ROWS_NUMBER + seatToReturn.getColumn() - 1);
          }
      }
    learner_created: true
  - name: src/cinema/SeatToDisplay.java
    visible: true
    text: |-
      package cinema;
      
      public class SeatToDisplay {
      
          private int row;
          private int column;
      
          private int price;
      
      
          public SeatToDisplay (int row, int column, int price) {
              this.row = row;
              this.column = column;
              this.price = price;
          }
      
          public int getRow() {
              return row;
          }
      
          public void setRow(int row) {
              this.row = row;
          }
      
          public int getColumn() {
              return column;
          }
      
          public void setColumn(int column) {
              this.column = column;
          }
      
          public int getPrice() {
              return price;
          }
      
          public void setPrice(int price) {
              this.price = price;
          }
      }
    learner_created: true
  - name: src/cinema/UserPurchaseRequest.java
    visible: true
    text: |
      package cinema;
      
      public class UserPurchaseRequest {
      
          private int row;
          private int column;
      
          public UserPurchaseRequest() {}
      
          public UserPurchaseRequest(int row, int column) {
              this.row = row;
              this.column = column;
          }
      
          public int getRow() {
              return row;
          }
      
          public void setRow(int row) {
              this.row = row;
          }
      
          public int getColumn() {
              return column;
          }
      
          public void setColumn(int column) {
              this.column = column;
          }
      
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Unchecked
record: -1
